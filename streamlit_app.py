import pandas as pd
import streamlit as st

from scripts.recommend import (
    add_new_films,
    get_als_and_content_vector,
    get_combine_content_vector,
    get_new_user,
    get_rec_on_content_vector_block,
    get_rec_on_test_content_vector,
    get_rec_on_train_content_vector,
    get_rec_on_train_content_vector_raw,
    get_recommendation_on_user_vector,
    get_recommendations_for_user_streamlit,
    get_top_movies,
    predict_recommendations,
    recommend_by_watched_ids,
)
from scripts.utils import (
    get_all_genres,
    get_project_paths,
    visualize_recommendations_df,
)


def main():

    st.set_page_config(page_title="üé¨ Movie Recommender", layout="wide")

    st.markdown(
        """
        <style>
        /* –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —Å–∞–π–¥–±–∞—Ä–∞ —á–µ—Ä–µ–∑ min/max –∏ % –æ—Ç —ç–∫—Ä–∞–Ω–∞ */
        [data-testid="stSidebar"] {
            width: clamp(250px, 25vw, 400px) !important;
        }
        </style>
        """,
        unsafe_allow_html=True,
    )

    st.title("üé• Movie Recommendation System")

    with open("params.yaml", "r") as f:
        paths = get_project_paths()

    movies = pd.read_csv(paths["raw_dir"] / "movies.csv")
    movies = movies

    # --- choice of mode ---
    mode = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:",
        [
            "–•–æ–ª–æ–¥–Ω—ã–π —Å—Ç–∞—Ä—Ç",
            "–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Ç–µ—Å—Ç –Ω–∞ —Ç–µ–≥–∞—Ö)",
            "–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Ç–µ—Å—Ç –Ω–∞ —Ñ–∏–ª—å–º–∞—Ö)",
            "–ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –≤–µ–∫—Ç–æ—Ä—É",
            "–ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏",
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ (–∂–∞–Ω—Ä—ã,—Ä–µ–π—Ç–∏–Ω–≥)",
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏,–∂–∞–Ω—Ä—ã)",
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞",
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∏–ª—å–º–æ–≤",
        ],
    )

    st.sidebar.markdown("---")

    # --- Search by ID ---
    movie_id = st.sidebar.number_input("–í–≤–µ–¥–∏—Ç–µ Movie ID", min_value=1, value=1)
    if movie_id in movies["movieId"].values:
        st.sidebar.success(
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {movies[movies['movieId'] == movie_id]['title'].values[0]}"
        )
    else:
        st.sidebar.warning("–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    st.sidebar.markdown("---")

    search_query = st.sidebar.text_input("üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")

    if search_query:
        search_results = movies[
            movies["title"].str.contains(search_query, case=False, na=False)
        ]
        if not search_results.empty:
            st.sidebar.markdown("# ## üîΩ Found films: ")
            st.sidebar.dataframe(
                search_results[["movieId", "title"]], use_container_width=True
            )
        else:
            st.sidebar.warning("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    # --- The main logic ---
    if mode == "–•–æ–ª–æ–¥–Ω—ã–π —Å—Ç–∞—Ä—Ç":
        st.subheader("üßä –†–µ–∂–∏–º —Ö–æ–ª–æ–¥–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞")
        st.info(
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∂–∞–Ω—Ä—É —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏."
        )

        selected_genres = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä—ã:",
            options=get_all_genres(movies),
            default=["Action", "Comedy"],
        )
        # Button to perform actions
        if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):

            get_top_movies(selected_genres)

    elif mode == "–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Ç–µ—Å—Ç –Ω–∞ —Ç–µ–≥–∞—Ö)":
        st.subheader("üìö –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏(—Ç–µ—Å—Ç –Ω–∞ —Ç–µ–≥–∞—Ö)")
        st.info(
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º —Ñ–∏–ª—å–º–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ—Ä–æ–≥–æ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Å—Ç–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ). –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–±–∏—Ç—ã –ø–æ –Ω–∞–±–æ—Ä–∞–º —Ç–µ–≥–æ–≤ –Ω–∞ –æ–±—É—á–∞—é—â—É—é "
            "–∏ —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—ã."
        )
        stage_rec = False

        # One horizontal line: Field + button
        with st.container():
            col1, col2 = st.columns([5, 1])  # Made a proportion 5 to 1 for beauty

            with col1:
                movie_ids_input = st.text_input(
                    "–í–≤–µ–¥–∏—Ç–µ ID —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1, 23, 45",
                    label_visibility="collapsed",  # We remove the duplicate label over the field
                )

            with col2:
                show_recs = st.button(
                    "–ü–æ–∫–∞–∑–∞—Ç—å", use_container_width=True
                )  # The button is stretched over the entire width of the column

        # Processing logic after pressing the button
        if show_recs:
            if movie_ids_input:
                try:
                    # We convert the introduced text into the list of numbers
                    movie_ids = [
                        int(id_.strip())
                        for id_ in movie_ids_input.split(",")
                        if id_.strip().isdigit()
                    ]

                    if movie_ids:
                        stage_rec = True
                        all_recommendations_train, recommendation_info = (
                            get_rec_on_train_content_vector(movie_ids)
                        )
                        all_recommendations_test, _ = get_rec_on_test_content_vector(
                            movie_ids
                        )
                        all_recommendations_full, _ = get_combine_content_vector(
                            movie_ids
                        )
                    else:
                        st.error("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ñ–∏–ª—å–º–∞.")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ID —Ñ–∏–ª—å–º–∞.")

        # Conclusion of recommendations for the entire width
        if stage_rec:

            for movie in recommendation_info:
                movie_id = movie["movie_id"]
                title = movie["title"]
                genres = movie["genres"]

                # We form a string with the desired format
                st.write(
                    f"–ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å–º–∞ —Å ID: {movie_id} (–ù–∞–∑–≤–∞–Ω–∏–µ: {title}) (–ñ–∞–Ω—Ä—ã: {genres})"
                )

            st.markdown("---")  # Dividing line for beauty
            st.subheader("üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–∞—é—â–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞:")
            st.dataframe(all_recommendations_train, use_container_width=True)

            st.subheader("üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞:")
            st.dataframe(all_recommendations_test, use_container_width=True)

            st.subheader("üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞:")
            st.dataframe(all_recommendations_full, use_container_width=True)

            st.subheader("–û—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Train/Test:")
            visualize_recommendations_df(
                all_recommendations_train, all_recommendations_test
            )

            st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π Train/–æ–±—â–∏–π –≤–µ–∫—Ç–æ—Ä:")
            visualize_recommendations_df(
                all_recommendations_train, all_recommendations_full
            )

    elif mode == "–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Ç–µ—Å—Ç –Ω–∞ —Ñ–∏–ª—å–º–∞—Ö)":
        st.subheader("üìö –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Ç–µ—Å—Ç –Ω–∞ —Ñ–∏–ª—å–º–∞—Ö)")
        st.info(
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º —Ñ–∏–ª—å–º–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ (–ø—Ä–æ—Å—Ç–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ). –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–±–∏—Ç—ã –ø–æ –Ω–∞–±–æ—Ä–∞–º —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—ã. "
        )

        stage_rec = False

        # One horizontal line: Field + button
        with st.container():
            col1, col2 = st.columns([5, 1])  # Made a proportion 5 to 1 for beauty

            with col1:
                movie_ids_input = st.text_input(
                    "–í–≤–µ–¥–∏—Ç–µ ID —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1, 23, 45",
                    label_visibility="collapsed",  # We remove the duplicate label over the field
                )

            with col2:
                show_recs = st.button(
                    "–ü–æ–∫–∞–∑–∞—Ç—å", use_container_width=True
                )  # The button is stretched over the entire width of the column

        # Processing logic after pressing the button
        if show_recs:
            if movie_ids_input:
                try:
                    # We convert the introduced text into the list of numbers
                    movie_ids = [
                        int(id_.strip())
                        for id_ in movie_ids_input.split(",")
                        if id_.strip().isdigit()
                    ]

                    if movie_ids:
                        stage_rec = True
                        (
                            all_recommendations_df_train,
                            all_recommendations_df_test,
                            recommendation_info,
                        ) = get_rec_on_train_content_vector_raw(movie_ids)

                    else:
                        st.error("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ñ–∏–ª—å–º–∞.")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ID —Ñ–∏–ª—å–º–∞.")

        # Conclusion of recommendations for the entire width
        if stage_rec:

            for movie in recommendation_info:
                movie_id = movie["movie_id"]
                title = movie["title"]
                genres = movie["genres"]
                # We form a string with the desired format
                st.write(
                    f"–ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å–º–∞ —Å ID: {movie_id} (–ù–∞–∑–≤–∞–Ω–∏–µ: {title}) (–ñ–∞–Ω—Ä—ã: {genres})"
                )

            st.markdown("---")  # Dividing line for beauty
            st.subheader("üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–∞—é—â–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞:")
            st.dataframe(all_recommendations_df_train, use_container_width=True)

            st.subheader("üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞:")
            st.dataframe(all_recommendations_df_test, use_container_width=True)

            st.subheader("üìä –û—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Train/Test:")
            visualize_recommendations_df(
                all_recommendations_df_train, all_recommendations_df_test
            )

    elif mode == "–ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
        st.subheader("üîÄ –ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        st.info(
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º —Ñ–∏–ª—å–º–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ + ALS item factors. (–ø—Ä–æ—Å—Ç–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ)"
        )

        stage_rec = False

        # One horizontal line: Field + button
        with st.container():
            col1, col2 = st.columns([5, 1])  # Made a proportion 5 to 1 for beauty

            with col1:
                movie_ids_input = st.text_input(
                    "–í–≤–µ–¥–∏—Ç–µ ID —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1, 23, 45",
                    label_visibility="collapsed",  # We remove the duplicate label over the field
                )

            with col2:
                show_recs = st.button(
                    "–ü–æ–∫–∞–∑–∞—Ç—å", use_container_width=True
                )  # The button is stretched over the entire width of the column

        # Processing logic after pressing the button
        if show_recs:
            if movie_ids_input:
                try:
                    # We convert the introduced text into the list of numbers
                    movie_ids = [
                        int(id_.strip())
                        for id_ in movie_ids_input.split(",")
                        if id_.strip().isdigit()
                    ]

                    if movie_ids:
                        stage_rec = True
                        all_recommendations_hybrid, recommendation_info_hybrid = (
                            get_als_and_content_vector(movie_ids)
                        )
                        all_recommendations_train, recommendation_info = (
                            get_rec_on_train_content_vector(movie_ids)
                        )

                    else:
                        st.error("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ñ–∏–ª—å–º–∞.")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ID —Ñ–∏–ª—å–º–∞.")

        # Conclusion of recommendations for the entire width
        if stage_rec:

            for movie in recommendation_info_hybrid:
                movie_id = movie["movie_id"]
                title = movie["title"]
                genres = movie["genres"]
                # We form a string with the desired format
                st.write(
                    f"–ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å–º–∞ —Å ID: {movie_id} (–ù–∞–∑–≤–∞–Ω–∏–µ: {title}) (–ñ–∞–Ω—Ä—ã: {genres})"
                )

            st.markdown("---")  # Dividing line for beauty
            st.subheader("üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞:")
            st.dataframe(all_recommendations_hybrid, use_container_width=True)

            st.subheader("üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞:")
            st.dataframe(all_recommendations_train, use_container_width=True)

            st.subheader(
                "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–º –≤–µ–∫—Ç–æ—Ä–µ / —á–∏—Å—Ç–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–º –≤–µ–∫—Ç–æ—Ä–µ:"
            )
            visualize_recommendations_df(
                all_recommendations_hybrid, all_recommendations_train
            )

    elif mode == "–ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –≤–µ–∫—Ç–æ—Ä—É":
        st.subheader("üë§ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        st.info(
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –≤–µ–∫—Ç–æ—Ä—É —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  (–ø—Ä–æ—Å—Ç–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ)"
        )

        stage_rec = False

        # One horizontal line: Field + button
        with st.container():
            col1, col2 = st.columns([5, 1])  # Made a proportion 5 to 1 for beauty

            with col1:
                user_id = st.text_input(
                    "–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1",
                    label_visibility="collapsed",  # We remove the duplicate label over the field
                )

            with col2:
                show_recs = st.button(
                    "–ü–æ–∫–∞–∑–∞—Ç—å", use_container_width=True
                )  # The button is stretched over the entire width of the column

        # Processing logic after pressing the button
        if show_recs:
            if user_id:
                try:
                    # We convert the introduced text into the list of numbers
                    user_id = int(user_id)

                    if user_id:
                        stage_rec = True
                        final_df, final_df_test = get_recommendation_on_user_vector(
                            user_id
                        )
                    else:
                        st.error("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        # Conclusion of recommendations for the entire width
        if stage_rec:

            st.markdown("---")  # Dividing line for beauty
            st.subheader(
                f"üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –æ—Å–Ω–æ–≤–µ train –≤—ã–±–æ—Ä–∫–∏:"
            )
            st.dataframe(final_df, use_container_width=True)

            st.subheader(
                f"üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –æ—Å–Ω–æ–≤–µ test –≤—ã–±–æ—Ä–∫–∏"
            )
            st.dataframe(final_df_test, use_container_width=True)

            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ train / test –≤—ã–±–æ—Ä–∫–µ:")
            visualize_recommendations_df(final_df, final_df_test)

    elif mode == "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞":
        st.subheader("üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞")
        st.info(
            "–î–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–º—É —Ñ–∏–ª—å–º—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä—ã. –¢–µ–≥–∏ –≤ —Å–∏–ª—É –∏—Ö –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª-–≤–∞ (–±–æ–ª–µ–µ 1000) –∏ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ "
            "–∫–∞—á–µ—Å—Ç–≤–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞ –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–µ–º—É."
        )

        # Data entry for a new film
        st.subheader("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞")
        new_movie_title = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞:", "Test")
        selected_genres = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä—ã:",
            options=sorted(get_all_genres(movies)),
            default=["Action", "Comedy"],
        )

        # Checking the presence of genres
        if not selected_genres:
            st.info("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∂–∞–Ω—Ä.")

        if st.button("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º"):
            # Adding a film and receiving recommendations
            all_recommendations_hybrid, recommendation_info_hybrid = add_new_films(
                new_movie_title, selected_genres
            )

            if all_recommendations_hybrid is not None:
                for movie in recommendation_info_hybrid:
                    st.write(
                        f"–ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å–º–∞ —Å ID: {movie['movie_id']} (–ù–∞–∑–≤–∞–Ω–∏–µ: {movie['title']}) (–ñ–∞–Ω—Ä—ã: {movie['genres']})"
                    )
                # Conclusion of recommendations
                st.subheader(
                    "üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–æ–≤–æ–º—É —Ñ–∏–ª—å–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞:"
                )
                st.dataframe(all_recommendations_hybrid, use_container_width=True)

    elif mode == "–ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏":
        st.subheader("üë§ –ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
        st.info(
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≥–æ—Ç–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–º—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –≤–µ–∫—Ç–æ—Ä–∞–º (—á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å)"
        )

        stage_rec = False

        # One horizontal line: Field + button
        with st.container():
            col1, col2 = st.columns([5, 1])  # Made a proportion 5 to 1 for beauty

            with col1:
                user_id = st.text_input(
                    "–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1",
                    label_visibility="collapsed",  # We remove the duplicate label over the field
                )

            with col2:
                show_recs = st.button(
                    "–ü–æ–∫–∞–∑–∞—Ç—å", use_container_width=True
                )  # The button is stretched over the entire width of the column

        # Processing logic after pressing the button
        if show_recs:
            if user_id:
                try:
                    # We convert the introduced text into the list of numbers
                    user_id = int(user_id)

                    if user_id:
                        stage_rec = True
                        final_nn = predict_recommendations(user_id, top_k=50)
                        final_user, final_df_test = get_recommendation_on_user_vector(
                            user_id
                        )
                    else:
                        st.error("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        # Conclusion of recommendations for the entire width
        if stage_rec:
            st.markdown("---")  # Dividing line for beauty
            st.subheader(
                f"üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:"
            )
            st.dataframe(final_nn, use_container_width=True)

            st.markdown("---")  # Dividing line for beauty
            st.subheader(
                f"üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –æ—Å–Ω–æ–≤–µ  –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –≤–µ–∫—Ç–æ—Ä–µ —Å –ø—Ä–æ—Å—Ç—ã–º —Å—Ö–æ–¥—Å—Ç–≤–æ–º :"
            )
            st.dataframe(final_user, use_container_width=True)

            st.subheader(
                f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏  —Å –ø—Ä–æ—Å—Ç—ã–º —Å—Ö–æ–¥—Å—Ç–≤–æ–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –≤–µ–∫—Ç–æ—Ä–µ:"
            )
            visualize_recommendations_df(final_nn, final_user)

            st.markdown("---")  # The dividing line

    elif mode == "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        st.subheader("üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        st.info(
            "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢.–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, —Ç–æ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å '–∏—Å—Ç–æ—Ä–∏–µ–π'"
        )
        # Fields for entering films and assessments
        movie_ids_input = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ movieId —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,50,300)"
        )
        ratings_input = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4.0,3.5,5.0)"
        )
        stage_rec = False

        if st.button("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
            # Adding a film and receiving recommendations
            try:
                movie_ids = [
                    int(x.strip()) for x in movie_ids_input.split(",") if x.strip()
                ]
                ratings = [
                    float(x.strip()) for x in ratings_input.split(",") if x.strip()
                ]

                final_df, new_user_idx = get_new_user(movie_ids, ratings)
                st.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω. –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {new_user_idx}")
                stage_rec = True

                if stage_rec:
                    st.markdown("---")  # Dividing line for beauty
                    st.subheader(
                        f"üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_user_idx} –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:"
                    )
                    st.dataframe(final_df, use_container_width=True)

                    st.markdown("---")  # Dividing line for beauty

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    elif mode == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ (–∂–∞–Ω—Ä—ã,—Ä–µ–π—Ç–∏–Ω–≥)":
        st.subheader("üë§ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
        st.info(
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏  (—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∂–∞–Ω—Ä–∞–º –∏ —Ä–µ–π—Ç–∏–Ω–≥—É)"
        )

        stage_rec = False

        # One horizontal line: Field + button
        with st.container():
            col1, col2 = st.columns([5, 1])  # Made a proportion 5 to 1 for beauty

            with col1:
                movie_ids_input = st.text_input(
                    "–í–≤–µ–¥–∏—Ç–µ ID —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1, 23, 45",
                    label_visibility="collapsed",  # We remove the duplicate label over the field
                )

            with col2:
                show_recs = st.button(
                    "–ü–æ–∫–∞–∑–∞—Ç—å", use_container_width=True
                )  # The button is stretched over the entire width of the column

        # Processing logic after pressing the button
        if show_recs:
            if movie_ids_input:
                try:
                    # We convert the introduced text into the list of numbers
                    movie_ids = [
                        int(id_.strip())
                        for id_ in movie_ids_input.split(",")
                        if id_.strip().isdigit()
                    ]

                    if movie_ids:
                        stage_rec = True
                        result, recommendation_info = recommend_by_watched_ids(
                            movie_ids
                        )

                    else:
                        st.error("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ñ–∏–ª—å–º–∞.")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ID —Ñ–∏–ª—å–º–∞.")

        # Conclusion of recommendations for the entire width
        if stage_rec:

            for movie in recommendation_info:
                movie_id = movie["movie_id"]
                title = movie["title"]
                genres = movie["genres"]
                # We form a string with the desired format
                st.write(
                    f"–ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å–º–∞ —Å ID: {movie_id} (–ù–∞–∑–≤–∞–Ω–∏–µ: {title}) (–ñ–∞–Ω—Ä—ã: {genres})"
                )

            st.markdown("---")  # Dividing line for beauty
            st.subheader(
                "üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏(—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –∂–∞–Ω—Ä–∞–º –∏ —Ä–µ–π—Ç–∏–Ω–≥—É):"
            )
            st.dataframe(result, use_container_width=True)

    elif mode == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏,–∂–∞–Ω—Ä—ã)":
        st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏,–∂–∞–Ω—Ä—ã)")
        st.info(
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏  (—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∂–∞–Ω—Ä–∞–º)"
        )

        stage_rec = False

        # One horizontal line: Field + button
        with st.container():
            col1, col2 = st.columns([5, 1])  # Made a proportion 5 to 1 for beauty

            with col1:
                user_id = st.sidebar.number_input(
                    "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", min_value=1
                )

            with col2:
                show_recs = st.button(
                    "–ü–æ–∫–∞–∑–∞—Ç—å", use_container_width=True
                )  # The button is stretched over the entire width of the column

        # Processing logic after pressing the button
        if show_recs:
            try:
                # We convert the introduced text into the list of numbers
                movie_ids = int(user_id)

                if movie_ids:
                    stage_rec = True
                    recommendations = get_recommendations_for_user_streamlit(user_id)

                else:
                    st.error("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")

        # Conclusion of recommendations for the entire width
        if stage_rec:

            st.write(f"–ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {movie_id}")

            st.markdown("---")  # Dividing line for beauty
            st.subheader(
                "üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏(—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∂–∞–Ω—Ä–∞–º):"
            )
            st.dataframe(recommendations, use_container_width=True)

    elif mode == "–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∏–ª—å–º–æ–≤":
        st.subheader("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∏–ª—å–º–æ–≤")
        st.info(
            "–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∏–ª—å–º–∞ —É–±–∏—Ä–∞–µ—Ç –µ–≥–æ –∏–∑ –æ–±—â–µ–π –≤—ã–¥–∞—á–∏."
        )

        # Fields for the input
        promote_input = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ movieId –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,50,300)"
        )
        block_input = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ movieId –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,50,300)"
        )

        # We convert the lines into lists of numbers
        promote_ids = (
            [int(x.strip()) for x in promote_input.split(",") if x.strip().isdigit()]
            if promote_input
            else []
        )
        block_ids = (
            [int(x.strip()) for x in block_input.split(",") if x.strip().isdigit()]
            if block_input
            else []
        )

        # The launch button of the recommendation
        if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–∫–∏"):
            # Call a function with filters
            all_recommendations, recommendation_info, temp_list = (
                get_rec_on_content_vector_block([1, 10, 100], promote_ids, block_ids)
            )

            # We display hot news with backlighting
            st.markdown("---")
            st.subheader("üé¨ –ì–æ—Ä—è—á–∏–µ –Ω–æ–≤–∏–Ω–∫–∏")

            def highlight_promoted(row):
                if row["movieId"] in promote_ids:
                    return ["background-color: # FFD966 "] * LEN (ROW)
                else:
                    return [""] * len(row)

            styled_temp_list = temp_list.style.apply(highlight_promoted, axis=1)
            st.dataframe(styled_temp_list, use_container_width=True)

            # We display the recommendations
            st.markdown("---")
            st.subheader("üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
            if all_recommendations.empty:
                st.warning("–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
            else:
                st.dataframe(all_recommendations, use_container_width=True)

            # Show a list of blocked films
            st.markdown("---")
            if block_ids:
                st.subheader("üé¨ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã")
                for movie_id in block_ids:
                    try:
                        title = movies[movies["movieId"] == movie_id]["title"].values[0]
                        st.info(f"{title}")
                    except IndexError:
                        st.warning(f"–§–∏–ª—å–º —Å movieId {movie_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    st.markdown("---")


if __name__ == "__main__":
    main()
